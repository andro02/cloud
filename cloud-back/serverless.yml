org: cloudtim10
app: cloud-back
service: cloud-back

package:
  exclude:
    - node_modules/**
    - .idea/**
    - .requirements/**
    - env/**
    - README.md
    - package.json
    - package-lock.json
    - requirements.txt
    - authorizer/**

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    REGION: eu-central-1
    CLIENT_POOL: { Ref: ClientPool }
    CLIENT_POOL_CLIENT: { Ref: ClientPoolClient }
    ADMIN_POOL: { Ref: AdminPool }
    ADMIN_POOL_CLIENT: { Ref: AdminPoolClient }
  httpApi:
    cors: true
    authorizers:
      clientAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: {"Fn::Join": ["", ["https://cognito-idp.eu-central-1.amazonaws.com/", { Ref: ClientPool }]]}
        audience: { Ref: ClientPoolClient }
      adminAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: {"Fn::Join": ["", ["https://cognito-idp.eu-central-1.amazonaws.com/", { Ref: AdminPool }]]}
        audience: { Ref: AdminPoolClient }
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:ListUsers
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [films, Arn]
            - "Fn::GetAtt": [favourites, Arn]
            - "Fn::GetAtt": [counterTable, Arn]
            - "Fn::GetAtt": [notifications, Arn]
        - Effect: Allow
          Action:
            - ses:SendEmail
          Resource: "*"

functions:
  login:
    handler: login/login.login
    package:
      include: 'login/**'
    events:
      - httpApi:
          path: /login
          method: post
  register:
    handler: register/register.register
    package:
      include: 'register/**'
    events:
      - httpApi:
          path: /register
          method: post
  uploadFile:
    handler: uploadFile/upload_file.upload
    package:
      include: 'uploadFile/**'
    events:
      - httpApi:
          path: /uploadFilm
          method: post
          authorizer:
            name: adminAuthorizer
  updateFile:
    handler: updateFile/update_file.updateFile
    package:
      include: 'updateFile/**'
    events:
      - httpApi:
          path: /updateFile
          method: put
          authorizer:
            name: adminAuthorizer
  downloadFile:
    handler: downloadFile/download_file.download
    package:
      include: 'downloadFile/**' 
    events:
      - httpApi:
          path: /downloadFilm
          method: get
  deleteFile:
    handler: deleteFile/delete_file.deleteFile
    package:
      include: 'deleteFile/**'
    events:
      - httpApi:
          path: /deleteFile
          method: delete
          authorizer:
            name: adminAuthorizer
  createFilm:
    handler: createFilms/create_films.create
    package:
      include: 'createFilms/**' 
    events:
      - httpApi:
          path: /film
          method: post
          authorizer:
            name: adminAuthorizer
  updateFilm:
    handler: updateFilm/update_films.update
    package:
      include: 'updateFilm/**' 
    events:
      - httpApi:
          path: /updateFilm
          method: put
          authorizer:
            name: adminAuthorizer
  deleteFilm:
    handler: deleteFilm/delete_film.delete
    package:
      include: 'deleteFilm/**' 
    events:
      - httpApi:
          path: /film/filename
          method: delete
          authorizer:
            name: adminAuthorizer
  createFavourites:
    handler: createFavourites/create_favourites.create
    package:
      include: 'createFavourites/**' 
    events:
      - httpApi:
          path: /favourite
          method: post
          authorizer:
            name: clientAuthorizer
  getNotifications:
    handler: getNotifications/get_notifications.get_all
    package:
      include: 'getNotifications/**' 
    events:
      - httpApi:
          path: /notifications
          method: get
          authorizer:
            name: clientAuthorizer
  getFilms:
    handler: getFilms/get_films.get_all
    package:
      include: 'getFilm/**'
    events:
      - httpApi:
          path: /film
          method: get
  getFilm:
    handler: getFilm/get_film.get
    package:
      include: 'getFilm/**'
    events:
      - httpApi:
          path: /film/filename
          method: get
          authorizer:
            name: adminAuthorizer
  getFavourites:
    handler: getFavourites/get_favourites.get_all
    package:
      include: 'getFavourites/**'
    events:
      - httpApi:
          path: /favourites
          method: get
          authorizer:
            name: clientAuthorizer
  deleteFavourites:
    handler: deleteFavourites/delete_favourites.delete
    package:
      include: 'deleteFavourites/**'
    events:
      - httpApi:
          path: /favourites/id
          method: get
          authorizer:
            name: clientAuthorizer
        
resources:
  Resources:
    ClientPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: client-pool
        Schema:
          - Name: email
            Mutable: true
            Required: true
          - Name: given_name
            Mutable: true
          - Name: family_name
            Mutable: true
          - Name: nickname
            Mutable: true
          - Name: birthdate
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    AdminPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: admin-pool
        Schema:
          - Name: email
            Mutable: true
            Required: true
          - Name: given_name
            Mutable: true
          - Name: family_name
            Mutable: true
          - Name: nickname
            Mutable: true
          - Name: birthdate
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    ClientPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: client-pool-client
        GenerateSecret: false
        UserPoolId:
          Ref: ClientPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    AdminPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: admin-pool-client
        GenerateSecret: false
        UserPoolId:
          Ref: AdminPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"
    films:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: films-table
        AttributeDefinitions:
          - AttributeName: filename
            AttributeType: S
        KeySchema:
          - AttributeName: filename
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    favourites:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: favourites-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    notifications:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: notifications-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    counterTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: counter-table
        AttributeDefinitions:
          - AttributeName: counterName
            AttributeType: S
        KeySchema:
          - AttributeName: counterName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    FilmBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: film-bucket
    # UploadRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     Policies:
    #       - PolicyName: upload-policy
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - s3:PutObject
    #                 - s3:PutObjectAcl
    #                 - s3:GetObject
    #                 - s3:GetObjectAcl
    #               Resource:
    #                 - "arn:aws:s3:::film-bucket/*"

plugins:
  - serverless-offline
custom:
  serverless-offline:
    useChildProcesses: true
    noAuth: true
